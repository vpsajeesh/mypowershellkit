If(!(Test-Path "$CSVFilePath")){
  Throw "$CSVFilePath doesn't exist"
}

$token= $AzureDevOpsPAT
$providedPath = Get-Item "$CSVFilePath"

If($providedPath.PSIsContainer){
   $csvFIlesToImport = Get-ChildItem -Path "$CSVFilePath" -File -Filter "*.csv"
}
else{
   $csvFIlesToImport = Get-ChildItem -Path "$($providedPath.Directory.FullName)" -File -Filter "$($providedPath.Name)" 
}

$ParameterList = @()

# Collecting all parameter from all CSV files
foreach($file in $csvFIlesToImport){
    $temp = Get-Content "$($file.FullName)"
    $temp[0] = $temp[0] -replace ' ' 
    Set-Content "$($file.FullName)" -Value $temp

    $Parameters = Import-Csv -Path "$($file.FullName)" 
    
    foreach($param in $Parameters){
        
        If($Parameters | Get-Member $CSVEnvColumnToImport){
            $paramObj = "" | select Variable,"$CSVEnvColumnToImport"
            $paramObj.Variable = $param.Variable
            $paramObj."$CSVEnvColumnToImport" = $param."$CSVEnvColumnToImport"
            $ParameterList += $paramObj
        }
    }

}

#convert parameters to json content
$parameterJson = ""
foreach($item in $ParameterList){
    
    $item.Variable = $item.Variable.Trim()
    $item.$CSVEnvColumnToImport = $item.$CSVEnvColumnToImport.Trim() -replace "\\","\\" -replace "`"","\`""
    $parameterJson += "`"$($item.Variable)`" : { `"Value`" : `"$($item.$CSVEnvColumnToImport)`"}," 
    
}

$parameterJson = $parameterJson.TrimEnd(",")


$jsonRequestbody = '{
  "variables": {
    '+$parameterJson+'
  },
  "type": "Vsts",
  "name": "'+$VGroupName+'",
  "description": "'+$($CSVEnvColumnToImport)+' Environment Tokens"
}'


$jsonRequestbody 

$User="" 
$AzureDevOpsURL = "https://dev.azure.com/$AzureDevOpsOrg/$AzureDevOpsProject"
$PostVGUri = "$AzureDevOpsURL/_apis/distributedtask/variablegroups?api-version=5.0-preview.1"
$GetVGUri = [uri]::EscapeUriString($AzureDevOpsURL+'/_apis/distributedtask/variablegroups?groupName='+$VGroupName+'&api-version=5.0-preview.1')

# Base64-encodes the Personal Access Token (PAT) appropriately 
$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $User,$token))); 
$header = @{Authorization=("Basic {0}" -f $base64AuthInfo)}; 
$response = Invoke-RestMethod -Method Get -ContentType application/json -Uri $GetVGUri -Headers $header 

If($response.value.Count -eq 1){
  # Variable group Exists, Updating it.

  $PostvgUpdateURI = [uri]::EscapeUriString($AzureDevOpsURL+'/_apis/distributedtask/variablegroups/'+$response.value.Id+'?api-version=5.0-preview.1')
  
  Invoke-RestMethod -Method Put -ContentType application/json -Uri $PostvgUpdateURI -Headers $header -Body $jsonRequestbody
}
elseif($response.value.Count -eq 0){
  
  Invoke-RestMethod -Method Post -ContentType application/json -Uri $PostVGUri -Headers $header -Body $jsonRequestbody
}
else{
    Write-Warning "Incorrect response received. please verify the response"
    $response
}
