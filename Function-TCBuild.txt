function Get-TCBuildDetails($buildId){
             
    $buildprojectListURL = "$teamCityHost/app/rest/buildTypes/id:$buildId"
    $buildprojectListURLResponse = Invoke-TCWebRequest -URL $buildprojectListURL -Method Get
    $TeamCitybuildProjects = ([xml]$buildprojectListURLResponse.Content).buildtype
        
    return $TeamCitybuildProjects

}

function Pause-TCBuild($BuildId){

    $buildprojectURL = "$teamCityHost/app/rest/buildTypes/$buildId/deleted"
    $buildprojectURLResponse = Invoke-WebRequest -Uri $buildprojectURL -Method Put -Body "true" -ContentType "text/plain"
    $TeamCitybuildProjectStatus = $buildprojectURLResponse.Content
        
    return $TeamCitybuildProjectStatus

}

function Remove-TCBuild($BuildId){

    $buildprojectURL = "$teamCityHost/app/rest/buildTypes/$buildId/"
    $buildprojectURLResponse = Invoke-TCWebRequest -URL $buildprojectURL -Method DELETE 
    
    return $buildprojectURLResponse

}

function Get-TCBuildList($buildName=$null,$buildId=$null,$projectId=$null,$projectName=$null){
  
    $searchString = ""
    if($projectId){
      $searchString = "?locator=affectedProject:(id:$projectId)"
    }
    elseif($buildId){
      $searchString = "?locator=id:$buildId"
    }
        
    $buildprojectListURL = "$teamCityHost/app/rest/buildTypes/$searchString"
    $buildprojectListURLResponse = Invoke-TCWebRequest -URL $buildprojectListURL -Method Get
    $TeamCitybuildProjects = ([xml]$buildprojectListURLResponse.Content).buildtypes.buildtype

    if($BuildName){
        $TeamCitybuildProjects = $TeamCitybuildProjects | Where-Object { $_.Name -match "$BuildName" }
    }

    if($projectName){
        $TeamCitybuildProjects = $TeamCitybuildProjects | Where-Object { $_.ProjectName -match "$projectName" }
    }

    return $TeamCitybuildProjects

}

function Get-TCBuildResults(){
    Param(
        [Parameter(Mandatory=$true)]
        [String] $buildProjectId,
        [Parameter(Mandatory=$false)] 
        [switch] $Latest,
        [Parameter(Mandatory=$false)]
        [ValidateSet("SUCCESS", "FAILURE", "UNKNOWN", "ALL")]
        [String] $Status = "ALL",
        [Parameter(Mandatory=$false)]
        [ValidateSet("true", "false", "any")]
        [String] $Pinned = "any"
    )

    $StatusValue = ""
    if($Status -ne "ALL"){
       $StatusValue = "status:$Status,"       
    }


    $LatestValue = ""
    if($Latest){
        $LatestValue = "count:1,"
    }

    $PinnedValue = "pinned:$Pinned"

    $buildURL = "$teamCityHost/app/rest/builds/?locator=buildType:$buildProjectId,$($StatusValue)$($LatestValue)$PinnedValue"
    
    $buildURLResponse = Invoke-TCWebRequest -URL $buildURL -Method Get
    $builds = ([xml]$buildURLResponse.Content).builds.build

    $BuildResults = @()
    foreach($build in $builds){
        $buildDtlURL = "$teamCityHost/app/rest/builds/id:$($build.Id)"
        $buildDtlURLResponse = Invoke-TCWebRequest -URL $buildDtlURL -Method Get
        $buildResult = ([xml]$buildDtlURLResponse.Content).build
        $BuildResults += $buildResult
    }

    return $BuildResult
}

function Get-TCBuildStep($BuildId,$StepId){

    $buildStepURL = "$teamCityHost/app/rest/buildTypes/$BuildId/steps/$StepId"
    try{
       $buildStepURLResponse = Invoke-TCWebRequest -URL $buildStepURL -Method Get
    }
    catch{
        throw "Unable to find Build step!"
    }
    $buildStep = ([xml]$buildStepURLResponse.Content).Step
        
    return $buildStep
}

function Disable-TCBuildStep($BuildId,$StepId){

    $buildStep = Get-TCBuildStep -BuildId $BuildId -StepId $StepId

    If($buildStep) {    
        $buildStepURL = "$teamCityHost/app/rest/buildTypes/$BuildId/steps/$StepId/disabled"
        
        $buildStepURLResponse = Invoke-WebRequest -Uri $buildStepURL -Headers $headers -Method Put -Body "true" -ContentType "text/plain"
    }
    
    return $buildStepURLResponse.Content

}

function Remove-TCBuildStep($BuildId,$StepId){
    
    $buildStep = Get-TCBuildStep -BuildId $BuildId -StepId $StepId

    If($buildStep) {    
        $buildStepURL = "$teamCityHost/app/rest/buildTypes/$BuildId/steps/$StepId"
        
        $buildStepURLResponse = Invoke-TCWebRequest -URL $buildStepURL -Method DELETE
    }
    
    return $buildStepURLResponse
}
