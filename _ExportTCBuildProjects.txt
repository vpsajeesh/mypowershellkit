$ErrorActionPreference="Stop"

$DevOpsModuleVersion = ""

If((Get-Module DevOpsKit)){
    Remove-Module DevOpsKit 
    Update-Module -Name DevOpsKit -RequiredVersion $DevOpsModuleVersion -Force
    Import-Module DevOpsKit -RequiredVersion $DevOpsModuleVersion -Verbose
}
else{

    try{
    
        Install-Module -Name DevOpsKit -RequiredVersion $DevOpsModuleVersion -Force
        Import-Module DevOpsKit -RequiredVersion $DevOpsModuleVersion -Verbose
    }
    catch{

        $functionsToLoad = Get-ChildItem "$($PSScriptRoot)\*" -Recurse -Include '*.ps1' -Exclude @('_*.ps1','*.Tests.ps1')

        Write-Verbose "Function scripts to dot-source:"
        $($functionsToLoad | Out-String)

        foreach($functionScript in $functionsToLoad){

            . $functionScript 
        }
        
    }
}


Connect-TCWebApi -TCURL "" -TCUserName "" -TCPassword ""

$buildprojs = Get-TCBuildList

$TCBuildExportList =@()
$counter = 0
$totalItem = $buildprojs.Count

foreach($bp in $buildprojs){
   
   $buildprojitem = "" | select BuildName,RootProject,ProjectName,LastestBuildDate,BuildStatus,WebURL,BuildId
   $buildprojitem.BuildName = $bp.name
   $buildprojitem.ProjectName = $bp.projectName
   $buildprojitem.WebURL = $bp.WebURL
   $buildprojitem.RootProject = ($bp.projectName -split "/")[0]
   $buildprojitem.BuildId = $bp.id
   $latestBuild = Get-TCBuildResults -buildProjectId $bp.Id -Latest
   if($latestBuild){
        $buildprojitem.LastestBuildDate = $latestBuild.finishDate
        $buildprojitem.BuildStatus = $latestBuild.status
   }
   $TCBuildExportList += $buildprojitem
   $counter ++
   Write-Progress -Activity "Collecting Build details" -Status "Collected: $counter of $totalItem" -PercentComplete (($counter/$totalItem)*100)
  
}

$TCBuildExportList | ft